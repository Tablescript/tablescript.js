assert = system.assert

############################################################################
# Plain old functions
f = fn() {
  1 + 2
}
assert(f() == 3)

f = fn(x, y) {
  x * y
}
assert(f(3, 4) == 12)
############################################################################

############################################################################
# Function scope
f = fn() {
  local = 9
}
local = 12
f()
assert(local == 12)

f = fn(q) {
  q = 'overwritten'
  q
}
assert(f(9) == 'overwritten')
############################################################################

############################################################################
# Multiple return values
f = fn(n) {
  if (n == 1) {
    'if'
  } else {
    'else'
  }
}
assert(f(1) == 'if')
assert(f(2) == 'else')
############################################################################

############################################################################
# Variable parameters
f = fn() {
  arguments
}
assert(f(1, 2, 3, 4, 5) == [1, 2, 3, 4, 5])

f = fn(a, b) {
  [a, b, arguments]
}
assert(f(1, 2, 3, 4, 5) == [1, 2, [1, 2, 3, 4, 5]])

f = fn(a, b, c) {
  [a, b, c]
}
assert(f(1, 2) == [1, 2, undefined])
############################################################################

############################################################################
# Closures
f = fn() {
  g = 9
  fn() {
    g
  }
}

g = 12
assert(f()() == 9)
############################################################################

############################################################################
# Currying
addN = fn(n) {
  fn(x) {
    x + n
  }
}
add5 = addN(5)
assert(add5(7) == 12)
############################################################################
