assert = system.assert
print = system.print
range = system.range
choose = system.choose
keys = system.keys

############################################################################
# Array definition and indexing.
#
# Arrays are 0-indexed. Arrays can be reverse-indexed using negative
# indices. Indexing past the end of an array - in any direction - returns
# undefined.
a = []
b = [1]
c = [1, 2, 3]

assert(a[0] == undefined)
assert(b[0] == 1)
assert(c[0] == 1)
assert(c[1] == 2)
assert(c[2] == 3)
assert(c[3] == undefined)

assert(c[-1] == 3)
assert(c[-2] == 2)
assert(c[-3] == 1)
assert(c[-4] == undefined)
############################################################################

############################################################################
# Array equality.
a = []
b = [1]
c = [1, 2, 3]

assert(a == [])
assert(b == [1])
assert(c == [1, 2, 3])
############################################################################

############################################################################
# Setting an array element.
a = [1, 2, 3]
a[1] = 99

assert(a == [1, 99, 3])
############################################################################

############################################################################
# Array element types.
#
# Array elements can be any type.
a = [
  1,
  'abc',
  { a: 3, b: 'def' },
  [4, 5, [6]],
  table {
    'first'
    'second'
    'third'
  },
  (n) => { n * 3 }
]

assert(a[0] == 1)
assert(a[1] == 'abc')
assert(a[2] == { a: 3, b: 'def' })
assert(a[2].a == 3)
assert(a[2].b == 'def')
assert(a[3] == [4, 5, [6]])
assert(a[3][0] == 4)
assert(a[3][1] == 5)
assert(a[3][2] == [6])
assert(a[3][2][0] == 6)
range(10)
  .map(() => {
    assert(['first', 'second', 'third'].includes(a[4]()))
  })
assert(a[5](2) == 6)
############################################################################

############################################################################
# Array.includes
#
# The includes function tests each element until it finds the value passed.
# It returns true if it finds it, and false otherwise.
a = [1, 2, 3, 4, 5]
assert(a.includes(1))
assert(a.includes(2))
assert(a.includes(3))
assert(a.includes(4))
assert(a.includes(5))
assert(not a.includes(100))
assert(not a.includes('abc'))
############################################################################

############################################################################
# Array.map
#
# The map function applies a function to each member of the array. It's also
# one of the Tablescript ways of "looping".
a = [1, 2, 3, 4, 5]
f = (n) => { n + 1 }
assert(a.map(f) == [2, 3, 4, 5, 6])

# Mapping functions can be "anonymous" and defined in place.
assert(a.map((n) => { n * 2 }) == [2, 4, 6, 8, 10])

# Use system.range to create an array of indices to loop over. This is the
# same as a "for loop" in other languages.
a = ['a', 'b', 'c', 'd', 'e']
assert(range(5).map((n) => { a[-1 - n] }) == ['e', 'd', 'c', 'b', 'a'])
############################################################################

############################################################################
# Array.reduce
#
# The reduce function is tricky. Given a starting value, it loops over each
# array member, calling a function with the "accumulator" - the starting
# value and then whatever your function returns - and the array element
# itself. Let's start simple.
a = [1, 2, 3, 4, 5]
sum = (acc, n) => { acc + n}
assert(a.reduce(sum, 0) == 15)

# This starts with 0, then calls the function with (0, 1), the accumulator
# and the first element. The function returns the sum, 1. Then it calls
# the function again with (1, 2), the accumulator result from the last
# call, and the second element. The function returns the sum, 3 - so far,
# the sum of the first 2 elements. The next call is with (3, 3) and returns
# 6. The next call is with (6, 4) and returns 10. And the final call is
# with (10, 5) and returns 15 - the sum of each element in the array.

a = [5, 7, 2, 19, 4]
min = (acc, n) => { n < acc ? n : acc }
assert(a.reduce(min, 10000) == 2)

max = (acc, n) => { n > acc ? n : acc }
assert(a.reduce(max, -1) == 19)
############################################################################

############################################################################
# Array references.
#
# Assigning an array to a variable does not copy the values. Instead, it
# copies a "reference" to the array - like a view on a variable. Any change
# to the array is visible through any reference (view).
a = [1, 2, 3]
b = a
a[0] = 99
assert(a == [99, 2, 3])
assert(b == [99, 2, 3])
c = b
b[2] = 'abc'
assert(a == [99, 2, 'abc'])
assert(b == [99, 2, 'abc'])
assert(c == [99, 2, 'abc'])
############################################################################

############################################################################
# Spreads.
#
# "Spreading" an array into another array copies the elements.
a = [1, 2, 3]
b = [a, 4, 5]
c = [...a, 4, 5]
assert(a == [1, 2, 3])
assert(b == [[1, 2, 3], 4, 5])
assert(c == [1, 2, 3, 4, 5])

a = [1, 2, 3]
b = [4, 5, 6]
c = [0, ...a, ...b, 7, 8]
assert(c == [0, 1, 2, 3, 4, 5, 6, 7, 8])
############################################################################

############################################################################
# Array.join
#
# Join all elements of an array into a string using the given delimiter. If
# no delimiter is provided, ',' is used.
a = [1, 2, 3, 4, 5]
assert(a.join() == '1,2,3,4,5')
assert(a.join('-') == '1-2-3-4-5')
############################################################################

############################################################################
# Array.reverse
#
# The reverse function returns a new array with the elements of the first
# in reverse order.
a = [1, 2, 3, 4, 5]
assert(a.reverse() == [5, 4, 3, 2, 1])
############################################################################

############################################################################
# Array.filter
#
# The filter function returns a new array containing only the elements of
# the original for which the passed function returns true.
a = [1, 2, 3, 4, 5, 6]
even = (n) => { n % 2 == 0 }
assert(a.filter(even) == [2, 4, 6])

a = ['red', 'orange', 'yellow', 'green', 'blue', 'violet', 'indigo']
length_6 = (n) => { n.length == 6 }
assert(a.filter(length_6) == ['orange', 'yellow', 'violet', 'indigo'])
############################################################################

############################################################################
# Array.find
#
# The find function returns the first element of the array for which the
# passed function returns true.
a = [1, 2, 3, 4, 5, 6]

system.assert(a.find((n) => { n == 3 }) == 3)
system.assert(a.find((n) => { n == 'abc' }) == undefined)

system.assert(a.findIndex((n) => { n == 3 }) == 2)
system.assert(a.findIndex((n) => { n == 'abc' }) == -1)

system.assert(a.indexOf(3) == 2)
system.assert(a.indexOf(99) == -1)

c = (a, b) => { a - b }
system.assert([4,2,5,1,3].sort(c) == [1,2,3,4,5])
